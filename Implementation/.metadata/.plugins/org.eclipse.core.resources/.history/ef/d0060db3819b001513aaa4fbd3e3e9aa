package com.group15.splitfield.controller;

import java.util.List;
import java.util.Queue;

import javax.swing.JButton;
import javax.swing.JFrame;

import com.group15.splitfield.gui.*;

public class GameScreenManager extends JFrame {
	
	Object currentPanel;
	Object pausePanel;
	
	//constructor
	public GameScreenManager(){
		
	}
	
	//methods
	public Queue<JButton> setCurrentPanelHolder(String s){
		if(s.equals("choosePlayType")){
			remove((MainMenu)currentPanel);
			currentPanel = new ChoosePlayTypeMenu();
			add((ChoosePlayTypeMenu)currentPanel);
			((ChoosePlayTypeMenu)currentPanel).repaint();
			return ((ChoosePlayTypeMenu)currentPanel).getButtons();
		}
		if(s.equals("mainMenu")){
			currentPanel = new MainMenu();
			add((MainMenu)currentPanel);
			((MainMenu)currentPanel).repaint();
			return ((MainMenu)currentPanel).getButtons();
		}
		else if(s.equals("highScores")){
			remove((MainMenu)currentPanel);
			currentPanel = new HighScoresMenu();
			add((HighScoresMenu)currentPanel);
			((HighScoresMenu)currentPanel).repaint();
			return ((HighScoresMenu)currentPanel).getButtons();
		}
		else if(s.equals("help")){
			remove((MainMenu)currentPanel);
			currentPanel = new HelpMenu();
			add((HelpMenu)currentPanel);
			((HelpMenu)currentPanel).repaint();
			return ((HelpMenu)currentPanel).getButtons();
		}
		else if(s.equals("exit")){
			remove((MainMenu)currentPanel);
			System.exit(0);
			return null;
		}
		else if(s.equals("back")){
			if(currentPanel.getClass().getName().equals("ChoosePlayTypeMenu")){
				remove((ChoosePlayTypeMenu)currentPanel);
				currentPanel = new MainMenu();
			}
			else if(currentPanel.getClass().getName().equals("HighScoresMenu")){
				remove((HighScoresMenu)currentPanel);
				currentPanel = new MainMenu();
			}
			else if(currentPanel.getClass().getName().equals("HelpMenu")){
				remove((HelpMenu)currentPanel);
				currentPanel = new MainMenu();
			}
			add((MainMenu)currentPanel);
			((MainMenu)currentPanel).repaint();
			return ((MainMenu)currentPanel).getButtons();
		}
		else if(s.equals("pause")){
			pausePanel = currentPanel;
			((GameEngine)pausePanel).setVisible(false);
			// GameEngine'in içindeki gameLoopu durdur.
			currentPanel = new InGameMenu();
			add((InGameMenu)currentPanel);
			((InGameMenu)currentPanel).repaint();
			return ((InGameMenu)currentPanel).getButtons();
		}
		else if(s.equals("continueGame")){
			remove((InGameMenu)currentPanel);
			currentPanel = pausePanel;
			((GameEngine)currentPanel).setVisible(true);
			add((GameEngine)currentPanel);
			((GameEngine)currentPanel).repaint();
			// GameEngine'in içindeki gameLoopu devam ettir.
			return null;
		}
		else if(s.equals("returnToMainMenu")){
			remove((InGameMenu)currentPanel);
			currentPanel = null;
			remove((GameEngine)pausePanel);
			pausePanel = null;
			currentPanel = new MainMenu();
			add((MainMenu)currentPanel);
			((MainMenu)currentPanel).repaint();
			return ((MainMenu)currentPanel).getButtons();
		}
		else if(s.equals("newGame")){
			remove((ChoosePlayTypeMenu)currentPanel);
			currentPanel = new GameEngine("new"); // Level buradan belirlenecek
			add((GameEngine)currentPanel);
			((GameEngine)currentPanel).repaint();
			return null;
		}
		else if(s.equals("loadGame")){
			remove((ChoosePlayTypeMenu)currentPanel);
			currentPanel = new GameEngine("load"); // Level buradan belirlenecek
			add((GameEngine)currentPanel);
			((GameEngine)currentPanel).repaint();
			return null;
		}
		else
			return null;
	}
	
	public void openFrames(){
		
	}
	public Object getcurrentPanelHolder(){
		return this.currentPanel;
	}
	
}
